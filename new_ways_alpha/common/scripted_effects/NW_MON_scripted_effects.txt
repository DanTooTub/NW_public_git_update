up_MON_corruption_of_state_apparatus_idea = {
	if = {
		limit = { has_idea = MON_corruption_of_state_apparatus_1 }
		swap_ideas = {
			remove_idea = MON_corruption_of_state_apparatus_1
			add_idea = MON_corruption_of_state_apparatus_2
		}
	}
	else_if = {
		limit = { has_idea = MON_corruption_of_state_apparatus_2 }
		swap_ideas = {
			remove_idea = MON_corruption_of_state_apparatus_2
			add_idea = MON_corruption_of_state_apparatus_3
		}
	}
	else_if = {
		limit = { has_idea = MON_corruption_of_state_apparatus_3 }
		swap_ideas = {
			remove_idea = MON_corruption_of_state_apparatus_3
			add_idea = MON_corruption_of_state_apparatus_4
		}
	}
	else_if = {
		limit = { has_idea = MON_corruption_of_state_apparatus_4 }
		swap_ideas = {
			remove_idea = MON_corruption_of_state_apparatus_4
			add_idea = MON_corruption_of_state_apparatus_5
		}
	}
	else_if = {
		limit = { NOT = { has_country_flag = NWmongol_1_flag } }
		country_event = { id = NWmongol_left.1 hours = 3 }
	}
}

down_MON_corruption_of_state_apparatus_idea = {
	if = {
		limit = { has_idea = MON_corruption_of_state_apparatus_5 }
		swap_ideas = {
			remove_idea = MON_corruption_of_state_apparatus_5
			add_idea = MON_corruption_of_state_apparatus_4
		}
	}
	else_if = {
		limit = { has_idea = MON_corruption_of_state_apparatus_4 }
		swap_ideas = {
			remove_idea = MON_corruption_of_state_apparatus_4
			add_idea = MON_corruption_of_state_apparatus_3
		}
	}
	else_if = {
		limit = { has_idea = MON_corruption_of_state_apparatus_3 }
		swap_ideas = {
			remove_idea = MON_corruption_of_state_apparatus_3
			add_idea = MON_corruption_of_state_apparatus_2
		}
	}
	else_if = {
		limit = { has_idea = MON_corruption_of_state_apparatus_2 }
		swap_ideas = {
			remove_idea = MON_corruption_of_state_apparatus_2
			add_idea = MON_corruption_of_state_apparatus_1
		}
	}
}

MON_overregulation_of_economy_set_variable = {
	hidden_effect = {
		clamp_variable = { var = MON_overregulation_of_economy_var min = 0 max = 100 }
		set_variable = { MON_overregulation_of_economy_01_var = MON_overregulation_of_economy_var }
		multiply_variable = { MON_overregulation_of_economy_01_var = 0.1 }
		set_variable = { MON_overregulation_of_economy_minus_01_var = MON_overregulation_of_economy_var }
		multiply_variable = { MON_overregulation_of_economy_minus_01_var = -0.1 }
		set_variable = { MON_overregulation_of_economy_015_var = MON_overregulation_of_economy_var }
		multiply_variable = { MON_overregulation_of_economy_015_var = 0.15 }
		set_variable = { MON_overregulation_of_economy_02_var = MON_overregulation_of_economy_var }
		multiply_variable = { MON_overregulation_of_economy_02_var = 0.2 }
		set_variable = { MON_overregulation_of_economy_minus_02_var = MON_overregulation_of_economy_var }
		multiply_variable = { MON_overregulation_of_economy_minus_02_var = -0.2 }
		### попытка умножить 20 на 0.0015 вероятно приводит к неверному значению и вместо 0.03 я получаю 0.3. Поэтому каждое значение придется отдельно делить на 100
		divide_variable = { MON_overregulation_of_economy_01_var = 100 }
		divide_variable = { MON_overregulation_of_economy_015_var = 100 }
		divide_variable = { MON_overregulation_of_economy_02_var = 100 }
		divide_variable = { MON_overregulation_of_economy_minus_02_var = 100 }
		divide_variable = { MON_overregulation_of_economy_minus_01_var = 100 }
		force_update_dynamic_modifier = yes
	}
}

MON_backwardness_of_state_level_set_variable = {
	if = {
		limit = { check_variable = { MON_backwardness_of_state_level_var < 1 } }
		remove_dynamic_modifier = { modifier = MON_backwardness_of_state_dyn }
	}
	hidden_effect = {
		if = {
			limit = { has_dynamic_modifier = { modifier = MON_backwardness_of_state_dyn } }
			set_variable = { MON_backwardness_of_state_level_minus_var = MON_backwardness_of_state_level_var }
			multiply_variable = { MON_backwardness_of_state_level_minus_var = -0.01 }
			set_variable = { MON_backwardness_of_state_level_minus_div_5_var = MON_backwardness_of_state_level_var }
			divide_variable = { MON_backwardness_of_state_level_minus_div_5_var = -500 }
			set_variable = { MON_backwardness_of_state_level_minus_div_3_var = MON_backwardness_of_state_level_var }
			divide_variable = { MON_backwardness_of_state_level_minus_div_3_var = -300 }
			force_update_dynamic_modifier = yes
		}
	}
}

MON_check_party_trust_effect = {
	if = {
		limit = { check_variable = { MON.MON_party_trust_var < 1 } }
		MON = { country_event = { id = NWmongol_left.2 hours = 3 } }
		if = {
			limit = {
				country_exists = SOV
				SOV = {
					NOT = { has_war_with = ROOT }
					OR = {
						has_government = communism
						has_government = trozkism
					}
				}
			}
			SOV = { country_event = { id = NWmongol_left.3 hours = 3 } }
		}
	}
}